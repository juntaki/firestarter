/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.firestarter.Channels', null, global);
goog.exportSymbol('proto.firestarter.Config', null, global);
goog.exportSymbol('proto.firestarter.ConfigList', null, global);
goog.exportSymbol('proto.firestarter.DeleteConfigRequest', null, global);
goog.exportSymbol('proto.firestarter.DeleteConfigResponse', null, global);
goog.exportSymbol('proto.firestarter.GetChannelsRequest', null, global);
goog.exportSymbol('proto.firestarter.GetConfigListRequest', null, global);
goog.exportSymbol('proto.firestarter.GetConfigRequest', null, global);
goog.exportSymbol('proto.firestarter.SetConfigResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.GetConfigRequest.displayName = 'proto.firestarter.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callbackid: msg.getCallbackid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.GetConfigRequest}
 */
proto.firestarter.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.GetConfigRequest;
  return proto.firestarter.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.GetConfigRequest}
 */
proto.firestarter.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetConfigRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallbackid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.GetConfigRequest} The clone.
 */
proto.firestarter.GetConfigRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.GetConfigRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string CallbackID = 1;
 * @return {string}
 */
proto.firestarter.GetConfigRequest.prototype.getCallbackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.firestarter.GetConfigRequest.prototype.setCallbackid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.GetConfigListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.GetConfigListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.GetConfigListRequest.displayName = 'proto.firestarter.GetConfigListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.GetConfigListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.GetConfigListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.GetConfigListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.GetConfigListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.GetConfigListRequest}
 */
proto.firestarter.GetConfigListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.GetConfigListRequest;
  return proto.firestarter.GetConfigListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.GetConfigListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.GetConfigListRequest}
 */
proto.firestarter.GetConfigListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.GetConfigListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetConfigListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.GetConfigListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetConfigListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.GetConfigListRequest} The clone.
 */
proto.firestarter.GetConfigListRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.GetConfigListRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.SetConfigResponse.displayName = 'proto.firestarter.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.SetConfigResponse}
 */
proto.firestarter.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.SetConfigResponse;
  return proto.firestarter.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.SetConfigResponse}
 */
proto.firestarter.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.SetConfigResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.SetConfigResponse} The clone.
 */
proto.firestarter.SetConfigResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.SetConfigResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.DeleteConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.DeleteConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.DeleteConfigRequest.displayName = 'proto.firestarter.DeleteConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.DeleteConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.DeleteConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.DeleteConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.DeleteConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callbackid: msg.getCallbackid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.DeleteConfigRequest}
 */
proto.firestarter.DeleteConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.DeleteConfigRequest;
  return proto.firestarter.DeleteConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.DeleteConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.DeleteConfigRequest}
 */
proto.firestarter.DeleteConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.DeleteConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.DeleteConfigRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.DeleteConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.DeleteConfigRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallbackid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.DeleteConfigRequest} The clone.
 */
proto.firestarter.DeleteConfigRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.DeleteConfigRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string CallbackID = 1;
 * @return {string}
 */
proto.firestarter.DeleteConfigRequest.prototype.getCallbackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.firestarter.DeleteConfigRequest.prototype.setCallbackid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.DeleteConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.DeleteConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.DeleteConfigResponse.displayName = 'proto.firestarter.DeleteConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.DeleteConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.DeleteConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.DeleteConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.DeleteConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.DeleteConfigResponse}
 */
proto.firestarter.DeleteConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.DeleteConfigResponse;
  return proto.firestarter.DeleteConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.DeleteConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.DeleteConfigResponse}
 */
proto.firestarter.DeleteConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.DeleteConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.DeleteConfigResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.DeleteConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.DeleteConfigResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.DeleteConfigResponse} The clone.
 */
proto.firestarter.DeleteConfigResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.DeleteConfigResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.firestarter.Config.repeatedFields_, null);
};
goog.inherits(proto.firestarter.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.Config.displayName = 'proto.firestarter.Config';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.firestarter.Config.repeatedFields_ = [3,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.Config} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: msg.getTitle(),
    callbackid: msg.getCallbackid(),
    channelsList: jspb.Message.getField(msg, 3),
    text: msg.getText(),
    regexp: msg.getRegexp(),
    urltemplate: msg.getUrltemplate(),
    bodytemplate: msg.getBodytemplate(),
    confirm: msg.getConfirm(),
    actionsList: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.Config}
 */
proto.firestarter.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.Config;
  return proto.firestarter.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.Config}
 */
proto.firestarter.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getChannelsList().push(value);
      msg.setChannelsList(msg.getChannelsList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegexp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrltemplate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBodytemplate(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConfirm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.getActionsList().push(value);
      msg.setActionsList(msg.getActionsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.Config} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.Config.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.Config.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCallbackid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getRegexp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getUrltemplate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getBodytemplate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getConfirm();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.Config} The clone.
 */
proto.firestarter.Config.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.Config} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string Title = 1;
 * @return {string}
 */
proto.firestarter.Config.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string CallbackID = 2;
 * @return {string}
 */
proto.firestarter.Config.prototype.getCallbackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setCallbackid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string Channels = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.firestarter.Config.prototype.getChannelsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.firestarter.Config.prototype.setChannelsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.firestarter.Config.prototype.clearChannelsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional string Text = 4;
 * @return {string}
 */
proto.firestarter.Config.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setText = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Regexp = 5;
 * @return {string}
 */
proto.firestarter.Config.prototype.getRegexp = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setRegexp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string URLTemplate = 6;
 * @return {string}
 */
proto.firestarter.Config.prototype.getUrltemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setUrltemplate = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string BodyTemplate = 7;
 * @return {string}
 */
proto.firestarter.Config.prototype.getBodytemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.firestarter.Config.prototype.setBodytemplate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool Confirm = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.firestarter.Config.prototype.getConfirm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.firestarter.Config.prototype.setConfirm = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated string Actions = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.firestarter.Config.prototype.getActionsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<string>} value  */
proto.firestarter.Config.prototype.setActionsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.firestarter.Config.prototype.clearActionsList = function() {
  jspb.Message.setField(this, 9, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.ConfigList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.firestarter.ConfigList.repeatedFields_, null);
};
goog.inherits(proto.firestarter.ConfigList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.ConfigList.displayName = 'proto.firestarter.ConfigList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.firestarter.ConfigList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.ConfigList.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.ConfigList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.ConfigList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.ConfigList.toObject = function(includeInstance, msg) {
  var f, obj = {
    configList: jspb.Message.toObjectList(msg.getConfigList(),
    proto.firestarter.Config.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.ConfigList}
 */
proto.firestarter.ConfigList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.ConfigList;
  return proto.firestarter.ConfigList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.ConfigList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.ConfigList}
 */
proto.firestarter.ConfigList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.firestarter.Config;
      reader.readMessage(value,proto.firestarter.Config.deserializeBinaryFromReader);
      msg.getConfigList().push(value);
      msg.setConfigList(msg.getConfigList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.ConfigList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.ConfigList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.ConfigList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.ConfigList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.firestarter.Config.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.ConfigList} The clone.
 */
proto.firestarter.ConfigList.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.ConfigList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Config config = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.firestarter.Config>}
 */
proto.firestarter.ConfigList.prototype.getConfigList = function() {
  return /** @type{!Array.<!proto.firestarter.Config>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.firestarter.Config, 1));
};


/** @param {Array.<!proto.firestarter.Config>} value  */
proto.firestarter.ConfigList.prototype.setConfigList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.firestarter.ConfigList.prototype.clearConfigList = function() {
  this.setConfigList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.Channels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.firestarter.Channels.repeatedFields_, null);
};
goog.inherits(proto.firestarter.Channels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.Channels.displayName = 'proto.firestarter.Channels';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.firestarter.Channels.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.Channels.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.Channels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.Channels} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.Channels.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.Channels}
 */
proto.firestarter.Channels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.Channels;
  return proto.firestarter.Channels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.Channels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.Channels}
 */
proto.firestarter.Channels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getListList().push(value);
      msg.setListList(msg.getListList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.Channels} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.Channels.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.Channels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.Channels.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.Channels} The clone.
 */
proto.firestarter.Channels.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.Channels} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string list = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.firestarter.Channels.prototype.getListList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.firestarter.Channels.prototype.setListList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.firestarter.Channels.prototype.clearListList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.firestarter.GetChannelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.firestarter.GetChannelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.firestarter.GetChannelsRequest.displayName = 'proto.firestarter.GetChannelsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.firestarter.GetChannelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.firestarter.GetChannelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.firestarter.GetChannelsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.firestarter.GetChannelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.firestarter.GetChannelsRequest}
 */
proto.firestarter.GetChannelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.firestarter.GetChannelsRequest;
  return proto.firestarter.GetChannelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.firestarter.GetChannelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.firestarter.GetChannelsRequest}
 */
proto.firestarter.GetChannelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.firestarter.GetChannelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetChannelsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.firestarter.GetChannelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.firestarter.GetChannelsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.firestarter.GetChannelsRequest} The clone.
 */
proto.firestarter.GetChannelsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.firestarter.GetChannelsRequest} */ (jspb.Message.cloneMessage(this));
};


goog.object.extend(exports, proto.firestarter);
